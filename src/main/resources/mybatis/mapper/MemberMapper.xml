<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="org.ds.dsyouth.mapper.MemberMapper">
	
	<!-- 청년부 멤버 -->
	<resultMap id="MemberMap" type="Member">
	    <id column="id" jdbcType="INTEGER" property="id" />
		<result column="name" jdbcType="VARCHAR" property="name" />
		<result column="guider" jdbcType="VARCHAR" property="guider" />
		<result column="depart_id" jdbcType="INTEGER" property="departId" />
		<result column="team_id" jdbcType="INTEGER" property="teamId" />
		<result column="group_id" jdbcType="INTEGER" property="groupId" />
		<result column="group_grade" jdbcType="VARCHAR" property="groupGrade" />
		<result column="date_of_birth" jdbcType="VARCHAR" property="dateOfBirth" />
		<result column="htel" jdbcType="VARCHAR" property="htel" />
		<result column="gender" jdbcType="VARCHAR" property="gender" />
		<result column="profile_img" jdbcType="VARCHAR" property="profileImg" />
		<result column="same_period_id" jdbcType="INTEGER" property="samePeriodId" />
		<result column="reg_user" jdbcType="INTEGER" property="regUser" />
	    <result column="reg_date" jdbcType="VARCHAR" property="regDate" />
	    <result column="mod_date" jdbcType="VARCHAR" property="modDate" />
	    <result column="mem_state" jdbcType="VARCHAR" property="memState" />
	    <result column="del_yn" jdbcType="VARCHAR" property="delYn" />
	    
	    <association property="depart" resultMap="org.ds.dsyouth.mapper.AdminMapper.DepartMap" columnPrefix="d_" />
	    <association property="team" resultMap="org.ds.dsyouth.mapper.AdminMapper.TeamMap" columnPrefix="t_" />
	    <association property="group" resultMap="org.ds.dsyouth.mapper.AdminMapper.GroupMap" columnPrefix="g_" />
	    <association property="samePeriod" resultMap="org.ds.dsyouth.mapper.AdminMapper.SamePeriodMap" columnPrefix="sp_" />
  	</resultMap>
  	
  	
	<!-- 청년부 멤버 등록 -->
	<insert id="insertMember" parameterType="Member" useGeneratedKeys="true" keyProperty="id">
       insert into member
          <trim prefix="(" suffix=")" suffixOverrides=",">
                 <if test="name != null">
                       name,
                 </if>
                 <if test="guider != null">
                       guider,
                 </if>
                 <if test="dateOfBirth != null">
                       date_of_birth,
                 </if>
                 <if test="htel != null">
                       htel,
                 </if>
                 <if test="departId != null">
                       depart_id,
                 </if>
                 <if test="teamId != null">
                       team_id,
                 </if>
                 <if test="groupId != null">
                       group_id,
                 </if>
                 <if test="groupGrade != null">
                       group_grade,
                 </if>
                 <if test="gender != null">
                       gender,
                 </if>
                 <if test="samePeriodId != null">
                       same_period_id,
                 </if>
                 <if test="profileImg != null">
                       profile_img,
                 </if>
				 <if test="regUser != null">
					 reg_user,
				 </if>
				 <if test="memState != null">
					 mem_state,
				 </if>
          </trim>
          <trim prefix="values (" suffix=")" suffixOverrides=",">
	           <if test="name != null">
	                 #{name},
	           </if>
	           <if test="guider != null">
	                 #{guider},
	           </if>
	           <if test="dateOfBirth != null">
	                 #{dateOfBirth},
	           </if>
	           <if test="htel != null">
	                 #{htel},
	           </if>
	           <if test="departId != null">
	                 #{departId},
	           </if>
	           <if test="teamId != null">
	                 #{teamId},
	           </if>
	           <if test="groupId != null">
	                 #{groupId},
	           </if>
	           <if test="groupGrade != null">
	                 #{groupGrade},
	           </if>
	           <if test="gender != null">
	                 #{gender},
	           </if>
	           <if test="samePeriodId != null">
	                 #{samePeriodId},
	           </if>
	           <if test="profileImg != null">
	                 #{profile_img},
	           </if>
		       <if test="regUser != null">
		        	 #{regUser},
		       </if>
		       <if test="memState != null">
		        	 #{memState},
		       </if>
       </trim>
   </insert>


	<!-- 검색어에 해당하는 멤버 인원수 구하기 -->
	<select id="selectMemberCount" parameterType="org.ds.dsyouth.search.MemberSearch" resultType="int">
		select count(*) from ( 
			select
				m.id,
			    m.team_id,
			    m.group_id,
			    m.mem_state,
			    m.del_yn,
			    t.id as t_id,
			    g.id as g_id
			from member m
			LEFT OUTER JOIN team t ON t.id = m.team_id
			LEFT OUTER JOIN `group` g ON g.id = m.group_id
			where m.del_yn = 'N'
				and m.mem_state != '6'
				<if test="teamId != null and teamId != '' and teamId != 0 and teamId != 10">
					and t.id = #{teamId}
				</if>
				<if test="groupId != null and groupId != '' and groupId != 0">
					and g.id = #{groupId}
				</if>
				<if test="nameKW != null and nameKW != ''">
					and m.name = #{nameKW}
					and m.mem_state != '5'
				</if>
		) a
	</select>

	<!-- 검색어에 해당하는 멤버 리스트 불러오기 -->
	<select id="selectMemberListBySearch" parameterType="org.ds.dsyouth.search.MemberSearch" resultMap="MemberMap">
		select
			m.id,
		    m.name,
		    m.guider,
		    m.depart_id,
		    m.team_id,
		    m.group_id,
		    m.group_grade,
		    m.date_of_birth,
		    m.htel,
		    m.gender,
		    m.same_period_id,
		    m.profile_img,
		    m.reg_user,
		    m.reg_date,
		    m.mod_date,
		    m.mem_state,
		    m.del_yn,
		    d.d_name as d_d_name,
		    t.id as t_id,
		    t.t_short_name as t_t_short_name,
		    g.id as g_id,
		    g.g_name as g_g_name,
		    sp.birth_year as sp_birth_year
		from member m
		LEFT OUTER JOIN depart d ON d.id = m.depart_id
		LEFT OUTER JOIN team t ON t.id = m.team_id
		LEFT OUTER JOIN `group` g ON g.id = m.group_id
		LEFT OUTER JOIN same_period sp ON sp.id = m.same_period_id
		where m.del_yn = 'N'
			and m.mem_state != '6'
			<if test="teamId != null and teamId != '' and teamId != 0 and teamId != 10">
				and t.id = #{teamId}
			</if>
			<if test="groupId != null and groupId != '' and groupId != 0">
				and g.id = #{groupId}
			</if>
			<if test="nameKW != null and nameKW != ''">
				and m.name like concat ('%', #{nameKW}, '%')
				and m.mem_state != '5'
			</if>
		order by m.name asc
		LIMIT #{startRow}, #{boardSize}
	</select>
	
	
	<!-- 팀별 멤버 리스트 불러오기 -->
	<select id="selectMemberListByTeam" parameterType="String" resultMap="MemberMap">
		select
			m.id,
		    m.name,
		    m.guider,
		    m.depart_id,
		    m.team_id,
		    m.group_id,
		    m.group_grade,
		    m.date_of_birth,
		    m.htel,
		    m.gender,
		    m.same_period_id,
		    m.profile_img,
		    m.reg_user,
		    m.reg_date,
		    m.mod_date,
		    m.mem_state,
		    m.del_yn,
		    d.d_name as d_d_name,
		    t.t_short_name as t_t_short_name,
		    g.g_name as g_g_name,
		    sp.birth_year as sp_birth_year
		from member m
		LEFT OUTER JOIN depart d ON d.id = m.depart_id
		LEFT OUTER JOIN team t ON t.id = m.team_id
		LEFT OUTER JOIN `group` g ON g.id = m.group_id
		LEFT OUTER JOIN same_period sp ON sp.id = m.same_period_id
		where t.t_short_name = #{team} 
			and m.del_yn = 'N'
			and m.mem_state != '5'
			and m.mem_state != '6'
		order by g.g_name asc, m.group_grade desc, m.name asc
	</select>
	
	<!-- 전체 멤버 리스트 불러오기 -->
	<select id="selectMemberList" resultMap="MemberMap">
		select
			m.id,
		    m.name,
		    m.guider,
		    m.depart_id,
		    m.team_id,
		    m.group_id,
		    m.group_grade,
		    m.date_of_birth,
		    m.htel,
		    m.gender,
		    m.same_period_id,
		    m.profile_img,
		    m.reg_user,
		    m.reg_date,
		    m.mod_date,
		    m.mem_state,
		    m.del_yn,
		    d.d_name as d_d_name,
		    t.t_short_name as t_t_short_name,
		    g.g_name as g_g_name,
		    sp.birth_year as sp_birth_year
		from member m
		LEFT OUTER JOIN depart d ON d.id = m.depart_id
		LEFT OUTER JOIN team t ON t.id = m.team_id
		LEFT OUTER JOIN `group` g ON g.id = m.group_id
		LEFT OUTER JOIN same_period sp ON sp.id = m.same_period_id
		where m.del_yn = 'N'
			and m.mem_state != '5'
			and m.mem_state != '6'
		order by m.name asc
	</select>
	
	
	<!-- 전체 멤버 리스트 불러오기 by 동기 -->
	<select id="selectMemberListBySamePeriod" resultMap="MemberMap">
		select
			m.id,
		    m.name,
		    m.guider,
		    m.depart_id,
		    m.team_id,
		    m.group_id,
		    m.group_grade,
		    m.date_of_birth,
		    m.htel,
		    m.gender,
		    m.same_period_id,
		    m.profile_img,
		    m.reg_user,
		    m.reg_date,
		    m.mod_date,
		    m.mem_state,
		    m.del_yn,
		    d.d_name as d_d_name,
		    t.t_short_name as t_t_short_name,
		    g.g_name as g_g_name,
		    sp.birth_year as sp_birth_year
		from member m
		LEFT OUTER JOIN depart d ON d.id = m.depart_id
		LEFT OUTER JOIN team t ON t.id = m.team_id
		LEFT OUTER JOIN `group` g ON g.id = m.group_id
		LEFT OUTER JOIN same_period sp ON sp.id = m.same_period_id
		where m.del_yn = 'N'
			and m.mem_state != '5'
			and m.mem_state != '6'
		order by d.d_name asc, t.t_short_name asc, m.name asc
	</select>
	
	
	<!-- 동기별 멤버 불러오기 -->
	<select id="selectMemberListBySamePeriodPer" parameterType="String" resultMap="MemberMap">
		select
			m.id,
		    m.name,
		    m.guider,
		    m.depart_id,
		    m.team_id,
		    m.group_id,
		    m.group_grade,
		    m.date_of_birth,
		    m.htel,
		    m.gender,
		    m.same_period_id,
		    m.profile_img,
		    m.reg_user,
		    m.reg_date,
		    m.mod_date,
		    m.mem_state,
		    m.del_yn,
		    d.d_name as d_d_name,
		    t.t_short_name as t_t_short_name,
		    g.g_name as g_g_name,
		    sp.birth_year as sp_birth_year
		from member m
		LEFT OUTER JOIN depart d ON d.id = m.depart_id
		LEFT OUTER JOIN team t ON t.id = m.team_id
		LEFT OUTER JOIN `group` g ON g.id = m.group_id
		LEFT OUTER JOIN same_period sp ON sp.id = m.same_period_id
		where m.same_period_id = #{sId}
			and m.del_yn = 'N'
			and m.mem_state != '5'
			and m.mem_state != '6'
		order by d.d_name asc, t.t_short_name, m.name asc
	</select>
	
	

	<!-- Id 값으로 멤버 불러오기 -->
	<select id="selectMember" parameterType="Member" resultMap="MemberMap">
		select
			m.id,
		    m.name,
		    m.guider,
		    m.depart_id,
		    m.team_id,
		    m.group_id,
		    m.group_grade,
		    m.date_of_birth,
		    m.htel,
		    m.gender,
		    m.same_period_id,
		    m.profile_img,
		    m.reg_user,
		    m.reg_date,
		    m.mod_date,
		    m.mem_state,
		    m.del_yn,
		    d.d_name as d_d_name,
		    t.t_short_name as t_t_short_name,
		    g.g_name as g_g_name,
		    sp.birth_year as sp_birth_year
		from member m
		LEFT OUTER JOIN depart d ON d.id = m.depart_id
		LEFT OUTER JOIN team t ON t.id = m.team_id
		LEFT OUTER JOIN `group` g ON g.id = m.group_id
		LEFT OUTER JOIN same_period sp ON sp.id = m.same_period_id
		where m.id = #{id}
		and m.del_yn = 'N'
	</select>

	<!-- 멤버 정보 수정 -->
	<update id="updateMember" parameterType="Member">
		update member
    	<set>
			<if test="name != null">
				name = #{name},
			</if>
			<if test="guider != null">
				guider = #{guider},
			</if>
			<if test="dateOfBirth != null">
				date_of_birth = #{dateOfBirth},
			</if>
	      	<if test="htel != null">
	        	htel = #{htel},
	      	</if>
	      	<if test="departId != null">
	        	depart_id = #{departId},
	      	</if>
	      	<if test="teamId != null">
	        	team_id = #{teamId},
	      	</if>
	      	<if test="groupId != null">
	        	group_id = #{groupId},
	      	</if>
	      	<if test="groupGrade != null">
	        	group_grade = #{groupGrade},
	      	</if>
	      	<if test="gender != null">
	        	gender = #{gender},
	      	</if>
	      	<if test="samePeriodId != null">
	        	same_period_id = #{samePeriodId},
	      	</if>
	      	<if test="profileImg != null">
	        	profile_img = #{profileImg},
	      	</if>
	      	<if test="memState != null">
	        	mem_state = #{memState}
	      	</if>
	    </set>
		where id = #{id}
	</update>
	
	
	<!-- 멤버 삭제 -->
	<update id="deleteMember" parameterType="Member">
		update member set del_yn = 'Y' where id = #{id}
	</update>
	
	
	<!-- 그룹의 cnt 구하기 -->
	<select id="selectGroupCnt" parameterType="int" resultType="int">
		select count(*) from ( 
			select
				id
			from member
			where group_id = #{id}
				and del_yn = 'N'
				and mem_state != '5'
				and mem_state != '6'
		) a
	</select>
	
	<!-- 동기의 cnt 구하기 -->
	<select id="selectSamePeriodCnt" parameterType="int" resultType="int">
		select count(*) from ( 
			select
				id
			from member
			where same_period_id = #{id}
				and del_yn = 'N'
				and mem_state != '5'
				and mem_state != '6'
		) a
	</select>
	
</mapper>